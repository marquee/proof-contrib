// Generated by CoffeeScript 1.10.0
var ContactForm, DEFAULT_PIGEONFARM_SERVER, FIELDS, METADATA, _clearError, _first_focus, _start, _validateField,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DEFAULT_PIGEONFARM_SERVER = 'https://pigeon-farm.herokuapp.com';

_start = new Date();

_first_focus = null;

FIELDS = [
  {
    tag: 'input',
    name: 'name',
    label: 'Name',
    placeholder: ''
  }, {
    tag: 'input',
    name: 'email',
    type: 'email',
    label: 'Email',
    placeholder: 'name@example.com',
    required: true
  }, {
    tag: 'input',
    name: 'subject',
    label: 'Subject',
    placeholder: ''
  }, {
    tag: 'textarea',
    name: 'message',
    label: 'Message',
    placeholder: '',
    required: true
  }
];

_validateField = function(name, field_el) {
  return console.log('validating', name, field_el);
};

_clearError = function(field_wrapper_el) {
  return console.log('clearing error state');
};

ContactForm = (function() {
  function ContactForm(wrapper_el, payload) {
    this._submitForm = bind(this._submitForm, this);
    this._clearError = bind(this._clearError, this);
    this._validateForm = bind(this._validateForm, this);
    this._recordFocus = bind(this._recordFocus, this);
    this._wrapper = wrapper_el;
    this._url = payload.url;
    this._constructForm();
  }

  ContactForm.prototype._constructForm = function() {
    var form_el;
    this._fields = {};
    form_el = document.createElement('form');
    FIELDS.forEach((function(_this) {
      return function(field_spec) {
        var field_el, field_wrapper_el, help_el, label_el;
        field_wrapper_el = document.createElement('label');
        field_wrapper_el.className = '_Field';
        field_wrapper_el.dataset.required = field_spec.required;
        label_el = document.createElement('span');
        label_el.className = '_Label';
        label_el.innerHTML = field_spec.label;
        help_el = document.createElement('span');
        help_el.className = '_Help';
        field_el = document.createElement(field_spec.tag);
        if (field_spec.type) {
          field_el.type = field_spec.type;
        }
        field_el.className = '_Input';
        if (field_spec.tag === 'textarea') {
          field_wrapper_el.classList.add('-multiline');
        }
        field_el.placeholder = field_spec.placeholder;
        field_el.required = field_spec.required;
        field_el.addEventListener('focus', _this._recordFocus);
        field_el.addEventListener('keypress', function() {
          return window.requestAnimationFrame(function() {
            return _this._validateForm(true);
          });
        });
        field_el.addEventListener('blur', _this._validateField);
        _this._fields[field_spec.name] = {
          el: field_el,
          help_el: help_el,
          spec: field_spec
        };
        field_wrapper_el.appendChild(label_el);
        field_wrapper_el.appendChild(field_el);
        field_wrapper_el.appendChild(help_el);
        return form_el.appendChild(field_wrapper_el);
      };
    })(this));
    this._button_el = document.createElement('button');
    this._button_el.className = '_Submit';
    this._button_el.innerHTML = 'Send Message';
    this._button_el.addEventListener('click', this._submitForm);
    this._button_el.disabled = true;
    form_el.appendChild(this._button_el);
    this._success_el = document.createElement('div');
    this._success_el.className = '_Success';
    this._success_el.innerHTML = this._wrapper.dataset.success_message;
    form_el.appendChild(this._success_el);
    return this._wrapper.appendChild(form_el);
  };

  ContactForm.prototype._recordFocus = function() {
    var field, name, ref, results;
    _first_focus = new Date();
    ref = this._fields;
    results = [];
    for (name in ref) {
      field = ref[name];
      results.push(field.el.removeEventListener('focus', this._recordFocus));
    }
    return results;
  };

  ContactForm.prototype._validateForm = function(soft) {
    var field, is_valid, name, ref;
    if (soft == null) {
      soft = false;
    }
    is_valid = true;
    ref = this._fields;
    for (name in ref) {
      field = ref[name];
      if (field.spec.required && !field.el.value) {
        field.el.dataset.valid = false;
        is_valid = false;
      } else {
        field.el.dataset.valid = true;
      }
    }
    this._button_el.disabled = !is_valid;
    return console.log(is_valid);
  };

  ContactForm.prototype._clearError = function(wrapper) {
    return field.el.dataset.valid = true;
  };

  ContactForm.prototype._submitForm = function(e) {
    var _now, field, form, name, ref, xhr;
    e.preventDefault();
    _now = new Date();
    form = {
      time_on_page: _now - _start,
      first_focus: _now - _first_focus,
      referrer: document.referrer,
      page_url: window.location.href,
      commit: this._wrapper.dataset.commit,
      local_tz: _now.getTimezoneOffset()
    };
    ref = this._fields;
    for (name in ref) {
      field = ref[name];
      form[name] = field.el.value;
    }
    xhr = new XMLHttpRequest();
    xhr.onload = (function(_this) {
      return function() {
        if (xhr.status === 201) {
          return _this._showSubmitSuccess();
        } else {
          return _this._showSubmitError();
        }
      };
    })(this);
    xhr.open('post', this._url, true);
    xhr.setRequestHeader('Content-Type', 'application/javascript');
    return xhr.send(JSON.stringify(form));
  };

  ContactForm.prototype._showSubmitSuccess = function() {
    console.log('success!');
    return this._wrapper.dataset.success = true;
  };

  ContactForm.prototype._showSubmitError = function() {
    return console.log('error!');
  };

  return ContactForm;

})();

METADATA = ['time_on_page', 'first_focus', 'referrer', 'page_url', 'commit', 'local_tz'];

module.exports = function(_field_overrides) {
  var _host, _url, field_list, form_el, xhr;
  if (_field_overrides == null) {
    _field_overrides = null;
  }
  if (_field_overrides) {
    FIELDS = _field_overrides;
  }
  form_el = document.querySelector('.ContactForm');
  if (form_el) {
    xhr = new XMLHttpRequest();
    xhr.onload = function() {
      var payload;
      if (xhr.status === 200) {
        payload = JSON.parse(xhr.responseText);
        return new ContactForm(form_el, payload);
      } else {
        return form_el.dataset.fallback_enabled = true;
      }
    };
    field_list = FIELDS.map(function(f) {
      return f.name;
    });
    field_list.push.apply(field_list, METADATA);
    _host = form_el.dataset.host || DEFAULT_PIGEONFARM_SERVER;
    _url = _host + "/publications/" + form_el.dataset.publication + "/form.json?fields=" + (field_list.join(','));
    xhr.open('get', _url, true);
    return xhr.send();
  }
};
