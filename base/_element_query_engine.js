// Generated by CoffeeScript 1.12.4
var addTo, clean, frame_fns, pending_frame, refresh, removeFrom,
  slice = [].slice;

clean = function(element, attr) {
  var val;
  val = element.getAttribute(attr);
  return (val != null ? typeof val.replace === "function" ? val.replace(/[\t\r\n]/g, ' ') : void 0 : void 0) || '';
};

addTo = function(element, attr, value) {
  var cur, val;
  if (element.nodeType === 1 && value) {
    val = value + "px";
    cur = clean(element, attr);
    if (cur.indexOf(val) === -1) {
      return element.setAttribute(attr, (cur + " " + val).trim());
    }
  }
};

removeFrom = function(element, attr, value) {
  var cur, updated, val;
  if (element.nodeType === 1 && value) {
    val = value + "px";
    cur = clean(element, attr);
    updated = false;
    while (cur.indexOf(val) >= 0) {
      cur = cur.replace(val, '');
      updated = true;
    }
    if (updated) {
      return element.setAttribute(attr, cur.trim());
    }
  }
};

pending_frame = null;

frame_fns = [];

refresh = function() {
  var fn1, rules, selector;
  frame_fns = [];
  fn1 = function() {
    var constraint, element, elements, i, len, results, values;
    elements = document.querySelectorAll(selector);
    results = [];
    for (i = 0, len = elements.length; i < len; i++) {
      element = elements[i];
      results.push((function() {
        var results1;
        results1 = [];
        for (constraint in rules) {
          values = rules[constraint];
          results1.push(values.forEach(function(value) {
            var _constraint, _element, _height, _width;
            _element = element;
            _constraint = constraint;
            _width = _element.offsetWidth;
            _height = _element.offsetHeight;
            if ((_constraint === 'min-width' && _width >= value) || (_constraint === 'max-width' && _width <= value) || (_constraint === 'min-height' && _height >= value) || (_constraint === 'max-height' && _height <= value)) {
              return frame_fns.push([addTo, _element, _constraint, value]);
            } else {
              return frame_fns.push([removeFrom, _element, _constraint, value]);
            }
          }));
        }
        return results1;
      })());
    }
    return results;
  };
  for (selector in _query_data) {
    rules = _query_data[selector];
    fn1();
  }
  if (!pending_frame) {
    pending_frame = true;
    return window.requestAnimationFrame(function() {
      pending_frame = false;
      return frame_fns.forEach(function(arg) {
        var args, fn;
        fn = arg[0], args = 2 <= arg.length ? slice.call(arg, 1) : [];
        return fn.apply(null, args);
      });
    });
  }
};

refresh();

window.addEventListener('resize', refresh, false);

window['elementQuery'] = refresh;
