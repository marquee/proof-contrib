// Generated by CoffeeScript 1.12.4
var React, UglifyJS, css, element_query_engine, fs, optimizeJS, parseCSS, path;

React = require('react');

css = require('css');

parseCSS = function(css_source) {
  var addQueryDataValue, processSelector, query_data;
  query_data = {};
  addQueryDataValue = function(selector, type, pair, number, value) {
    var base, base1, parts;
    selector = selector.trim();
    if (selector) {
      if (!(number && value)) {
        parts = /^([0-9]*.?[0-9]+)(px|em)$/.exec(pair);
        if (parts != null) {
          number = Number(parts[1]);
          if (number.toString() !== 'NaN') {
            value = parts[2];
          }
        }
      }
      if (value) {
        if (query_data[selector] == null) {
          query_data[selector] = {};
        }
        if ((base = query_data[selector])[type] == null) {
          base[type] = [];
        }
        if ((base1 = query_data[selector][type])._recorded == null) {
          base1._recorded = {};
        }
        if (!query_data[selector][type]._recorded[number]) {
          query_data[selector][type].push(number);
        }
        return query_data[selector][type]._recorded[number] = true;
      }
    }
  };
  processSelector = function(selector_text) {
    var regex, selectors;
    if (selector_text) {
      regex = /(\[(min\-width|max\-width|min\-height|max\-height)\~\=(\'|\")([0-9]*.?[0-9]+)(px|em)(\'|\")\])(\[(min\-width|max\-width|min\-height|max\-height)\~\=(\'|\")([0-9]*.?[0-9]+)(px|em)(\'|\")\])?/gi;
      selectors = selector_text.split(',');
      return selectors.forEach(function(sel) {
        var k, number, prev_index, result, results, selector, t, tail;
        selector = null;
        prev_index = 0;
        k = 0;
        results = [];
        while (k === 0 || (result != null)) {
          result = regex.exec(sel);
          if (result != null) {
            number = Number(result[4]);
            if (number.toString() !== 'NaN') {
              if (selector == null) {
                selector = sel.substring(prev_index, result.index);
                tail = sel.substring(result.index + result[1].length);
                if (tail.length > 0) {
                  t = tail.indexOf(' ');
                  if (t !== 0) {
                    if (t > 0) {
                      tail = tail.substring(0, t);
                    }
                    tail = tail.replace(/(\[(min\-width|max\-width|min\-height|max\-height)\~\=(\'|\")([0-9]*.?[0-9]+)(px|em)(\'|\")\])/gi, '');
                    selector += tail;
                  }
                }
              }
              addQueryDataValue(selector, result[2], result[4] + result[5], number, result[5]);
            }
            if (!result[7]) {
              prev_index = result.index + result[1].length;
              selector = null;
            } else {
              regex.lastIndex = result.index + result[1].length;
            }
          }
          results.push(k++);
        }
        return results;
      });
    }
  };
  css.parse(css_source).stylesheet.rules.forEach(function(rule) {
    var ref;
    return (ref = rule.selectors) != null ? ref.forEach(function(selector) {
      return processSelector(selector);
    }) : void 0;
  });
  return query_data;
};

UglifyJS = require('uglify-js');

fs = require('fs');

path = require('path');

optimizeJS = require('optimize-js');

element_query_engine = fs.readFileSync(path.join(__dirname, '_element_query_engine.js')).toString();

module.exports = React.createClass({
  displayName: 'ElementQuery',
  propTypes: {
    styles: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.arrayOf(React.PropTypes.string)])
  },
  getDefaultProps: function() {
    return {
      styles: ['style.sass']
    };
  },
  render: function() {
    var css_source, eq_script, styles, stylesheets;
    if (this.props.styles.map == null) {
      stylesheets = [this.props.styles];
    } else {
      stylesheets = this.props.styles;
    }
    styles = stylesheets.map(function(stylesheet) {
      var file;
      file = path.join(global.build_info.asset_cache_directory, stylesheet);
      if (file.split('.').pop() === 'sass') {
        file = file.replace('.sass', '.css');
      }
      return fs.readFileSync(file).toString();
    });
    css_source = styles.join('');
    eq_script = "(function(window){\n    var _query_data = " + (JSON.stringify(parseCSS(css_source), null, 4)) + ";\n    " + element_query_engine + "\n})(window);";
    if (process.env.NODE_ENV === 'production') {
      eq_script = optimizeJS(UglifyJS.minify(eq_script, {
        fromString: true
      }).code);
    }
    return React.createElement("script", {
      "dangerouslySetInnerHTML": {
        __html: eq_script
      }
    });
  }
});
